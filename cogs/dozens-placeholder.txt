import os
import discord
import aiohttp
from discord.ext import commands
from utils.constants import RiftConstants

constants = RiftConstants()

# Load Roblox cookie from environment (.env file)
# ROBLOX_COOKIE = os.getenv("ROBLOX_COOKIE")
ROBLOX_COOKIE = "CAEaAh
ROBLOX_USER_ID = 9613555137

class RobloxFilter(commands.Cog):
    def __init__(self, rift: commands.Bot):
        self.rift = rift

    async def roblox_filter(self, text: str, under13: bool = False) -> str | None:
        url = "https://textfilter.roblox.com/v1/filter-text"
        payload = {
            "text": text,
            "context": "Chat",
            "userId": ROBLOX_USER_ID,
            "chatMode": "Under13" if under13 else "Over13"
        }

        headers = {
            "Cookie": ROBLOX_COOKIE,
            "Content-Type": "application/json"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, headers=headers) as resp:
                    if resp.status != 200:
                        return None
                    data = await resp.json()
            return data.get("filteredText")
        except Exception:
            return None

    @commands.command(name="filter")
    async def filter_word(self, ctx: commands.Context, word: str = None, age: str = None):
        try:
            if not word:
                embed = discord.Embed(
                    description="<:RiftFail:1421378112339312742> Please specify a word to check.",
                    color=0x89FFBC
                )
                return await ctx.send(embed=embed)

            # Delete invoking message if prefixed with ">"
            if ctx.message.content.startswith(">"):
                try:
                    await ctx.message.delete()
                except discord.Forbidden:
                    pass

            under13 = age and age.lower() in ["13", "under", "u13", "under13"]

            filtered = await self.roblox_filter(word, under13)

            if not filtered:
                embed = discord.Embed(
                    description="<:RiftFail:1421378112339312742> An error occurred while reaching Roblox filter API. Please try again later.",
                    color=0x89FFBC
                )
                return await ctx.send(embed=embed)

            allowed = (filtered.lower() == word.lower())

            if allowed:
                desc = f"<:RiftSuccess:1421378019167309888> **Allowed** in Roblox chat."
            else:
                desc = f"<:RiftFail:1421378112339312742> **Blocked** or filtered in Roblox chat."

            embed = discord.Embed(
                title="<:riftsystems:1421319259472003212> Roblox Chat Filter",
                description=desc,
                color=0x89FFBC
            )

            embed.add_field(name="Input", value=f"`{word}`", inline=False)
            embed.add_field(
                name=f"Filtered ({'Under 13' if under13 else '13+'})",
                value=f"`{filtered}`",
                inline=False
            )

            await ctx.send(embed=embed)

        except Exception as e:
            error_embed = discord.Embed(
                title="<:riftsystems:1421319259472003212> Roblox Chat Filter",
                description=(
                    f"<:RiftFail:1421378112339312742> An unexpected error occurred.\n\n"
                    f"```{type(e).__name__}: {e}```\n"
                    f"Please contact [Rift Systems](https://discord.gg/EPaU5aWqCU) for support."
                ),
                color=0x89FFBC
            )
            await ctx.send(embed=error_embed)


async def setup(rift: commands.Bot):
    await rift.add_cog(RobloxFilter(rift))




























































import discord
from discord.ext import commands
from discord import app_commands
from utils.utils import RiftContext


class Setup(commands.Cog):
    def __init__(self, rift: commands.Bot):
        self.rift = rift

    # Dropdown class
    class SetupDropdown(discord.ui.Select):
        def __init__(self):
            options = [
                discord.SelectOption(label="Setup Option")
            ]
            super().__init__(
                placeholder="Choose an option...",
                min_values=1,
                max_values=1,
                options=options,
            )

        async def callback(self, interaction: discord.Interaction):
            embed = discord.Embed(
                title=f"<:riftsystems:1421319259472003212> Setup Information",
                description="This command is still in the works.\n\n"
                            "For more info, join our Discord:\n"
                            "https://discord.gg/riftsystems",
                color=0x89FFBC,
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)

    # View for dropdown
    class SetupView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(Setup.SetupDropdown())

    # Slash command
    @app_commands.command(name="setup", description="Setup command (in the works)")
    @app_commands.checks.has_permissions(administrator=True)
    async def setup_slash(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title=f"<:riftsystems:1421319259472003212> Setup",
            description=(
                f"This command is still in the works.\n\n"
                f"For more info, join our Discord:\n"
                f"https://discord.gg/riftsystems"
            ),
            color=0x89FFBC,
        )
        view = self.SetupView()
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=False)

    @setup_slash.error
    async def setup_slash_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingPermissions):
            await interaction.response.send_message(
                f"{self.rift.error} You need to be an **administrator** to use this command.",
                ephemeral=True
            )

    # Prefix command
    @commands.command(name="setup")
    @commands.has_permissions(administrator=True)
    async def setup_prefix(self, ctx: RiftContext):
        embed = discord.Embed(
            title=f"<:riftsystems:1421319259472003212> Setup",
            description=(
                f"This command is still in the works.\n\n"
                f"For more info, join our Discord:\n"
                f"https://discord.gg/riftsystems"
            ),
            color=0x89FFBC,
        )
        view = self.SetupView()
        await ctx.send(embed=embed, view=view)

    @setup_prefix.error
    async def setup_prefix_error(self, ctx: RiftContext, error):
        if isinstance(error, commands.MissingPermissions):
            await ctx.send_error(
                f"{self.rift.error} You need to be an **administrator** to use this command."
            )


async def setup(rift: commands.Bot):
    await rift.add_cog(Setup(rift))
